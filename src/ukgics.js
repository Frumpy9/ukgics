/**
 * work-schedule-ics — plain version
 * VIBE-CODED: generated by AI
 *
 * Scrapes the UKG/Kronos “My Schedule” page, collects every
 * *future* shift, and downloads an .ics file.
 * Duplicate-safe: UID = Unix timestamp of shift start.
 */

const EVENT_TITLE = 'Work';          // calendar event name
const FILE_NAME   = 'work_schedule'; // download file base name

/* ────────── tiny inline “ics builder” ────────── */
function icsBuilder() {
  const pad = n => String(n).padStart(2, '0');
  const utc = d =>
    `${d.getUTCFullYear()}${pad(d.getUTCMonth() + 1)}${pad(d.getUTCDate())}T` +
    `${pad(d.getUTCHours())}${pad(d.getUTCMinutes())}00Z`;
  const items = [];

  return {
    add(summary, desc, start, end) {
      const uid = `${start.getTime()}@work-schedule`;
      items.push(
`BEGIN:VEVENT
UID:${uid}
DTSTAMP:${utc(new Date())}
SUMMARY:${summary}
DESCRIPTION:${desc.replace(/,/g,'\\,')}
DTSTART:${utc(start)}
DTEND:${utc(end)}
END:VEVENT`);
    },
    save(fileBase) {
      if (!items.length) { alert('No upcoming shifts found.'); return; }
      const body =
`BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
PRODID:-//work-schedule-ics//EN
${items.join('\r\n')}
END:VCALENDAR`;

      const blob = new Blob([body], { type:'text/calendar;charset=utf-8' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = `${fileBase}.ics`;
      a.click();
    }
  };
}

/* ───────── scrape + export ───────── */
(() => {
  const today = new Date(), cal = icsBuilder();

  document.querySelectorAll('li[id^="myschedule-day_"]').forEach(li => {
    const node = li.querySelector('.listEntity');
    if (!node || node.classList.contains('isToday')) return;

    const dt = node.querySelector('time')?.getAttribute('datetime');
    if (!dt) return;

    const day = new Date(dt);
    if (day < today) return;

    node.querySelectorAll('time.label').forEach(t => {
      const m = t.textContent.match(/(\d{1,2}:\d{2} [AP]M)-(\d{1,2}:\d{2} [AP]M)/);
      if (!m) return;
      const [ , s, e ] = m;
      const start = new Date(`${day.toDateString()} ${s}`);
      const end   = new Date(`${day.toDateString()} ${e}`);
      cal.add(EVENT_TITLE, t.textContent.trim(), start, end);
    });
  });

  cal.save(FILE_NAME);
})();
